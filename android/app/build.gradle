def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    defaultConfig {
        applicationId "com.excluzeev.mobileapp"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // ndk {
        //     // abiFilters "armeabi-v7a"
        //     abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        // }

        multiDexEnabled true
    }

    signingConfigs {
        config {
            keyAlias 'vjpranay'
            keyPassword 'J35u5777#'
            storeFile file('key.jks')
            storePassword 'J35u5777#'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
}

configurations.all {
    resolutionStrategy {
        force 'android.arch.lifecycle:viewmodel:1.1.1'
        force 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0-rc01'
//        force 'com.android.support:support-core-utils:28.0.0'
//        force 'com.android.support:support-fragment:28.0.0'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:multidex:1.0.3'
}


// Android Release Build Crash Error
project.afterEvaluate {
	assembleRelease.doLast {
		String src
		if(project.hasProperty('target-platform') &&
			project.property('target-platform') == 'android-arm64') {
			// If we are building the 64bit then we also want to add the 32bit libflutter.so
			src = "$flutterRoot/bin/cache/artifacts/engine/android-arm-release/flutter.jar"
		}else{
			// If we are building the opposite (32bit), we include the 64bit libflutter.so
			src = "$flutterRoot/bin/cache/artifacts/engine/android-arm64-release/flutter.jar"
		}
		copy {
			from zipTree(src)
			include 'lib/*/libflutter.so'
			into "$buildDir/intermediates/jniLibs/release/0/"
		}
	}
}